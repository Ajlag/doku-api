/*
 * Copyright (c) Institute for Development Impact (I4DI)
 *
 * The software and accompanying documentation that is available for download from Site is the copyrighted and/or
 * patented work of I4DI and/or its suppliers. Use of the software is governed by the terms of the license agreement
 * that is included with such downloaded software. You will not be able to install any software that is accompanied
 * by or includes a license agreement unless you agree to the terms of the included license agreement. If you do not
 * agree to the terms of the included license agreement, you will not be able to install the software.
 *
 * If no license agreement accompanies the software, use of the software will be governed by the Terms of Use. You
 * agree that you will not decompile, reverse engineer, or otherwise attempt to discover the source code of the software
 * available on Site.
 */
buildscript {
    ext {
        springBootVersion = '2.3.3.RELEASE'
        springSecurityTestVersion = '5.0.3.RELEASE'
        mysqlVersion = '8.0.21'
        jjwtVersion = '0.9.1'
        hibernateEnversVersion = '5.4.21.Final'
        mapstructVersion = '1.3.1.Final'
        jaywayJsonpathVersion = '2.4.0'
        jodaTimeVersion = '2.10.6'
        jadiraVersion = '6.0.1.GA'
        junitGradlePluginVersion = '1.1.0'
        junitVersion = '5.7.0'
        javaxInterceptorVersion = '3.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitGradlePluginVersion}")
    }
}

plugins {
    id "net.ltgt.apt" version "0.8"
}

group 'org.i4di'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

bootJar {
    baseName = 'doku-api'
    version = '0.0.1'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring dependencies
    compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-freemarker:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")

    // Third party dependencies
    compile("io.jsonwebtoken:jjwt:${jjwtVersion}")
    compile("org.hibernate:hibernate-envers:${hibernateEnversVersion}")
    compile("joda-time:joda-time:${jodaTimeVersion}")
    compile("org.jadira.usertype:usertype.core:${jadiraVersion}")

    // Mapstruct dependencies
    compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
    compile("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    // Annotation processors
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    annotationProcessor("joda-time:joda-time:${jodaTimeVersion}")

    // Database dependencies
    runtime("mysql:mysql-connector-java:${mysqlVersion}")

    // Test dependencies
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testCompile("com.jayway.jsonpath:json-path:${jaywayJsonpathVersion}")
}
